{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/automation/AutomationBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function _preventExecution() internal view {\n    // solhint-disable-next-line avoid-tx-origin\n    if (tx.origin != address(0) && tx.origin != address(0x1111111111111111111111111111111111111111)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    _preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AutomationBase} from \"./AutomationBase.sol\";\nimport {AutomationCompatibleInterface} from \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "contracts/Automation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {AutomationCompatibleInterface} from \"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\";\n\ncontract Automation is AutomationCompatibleInterface {\n    mapping(address => bool) public condition;\n    mapping(address => uint256) public swapAmounts;\n    address[] public users;\n\n    address public swapContractAddress;\n\n    event TokensSwapped(address user, uint256 amount);\n\n    constructor(address _swapContractAddress) {\n        swapContractAddress = _swapContractAddress;\n    }\n\n    function addUser(address user, uint256 swapAmount) external {\n        if (swapAmounts[user] == 0) {\n            users.push(user);\n        }\n        swapAmounts[user] = swapAmount;\n    }\n\n    function setCondition(address user, bool value) external {\n        condition[user] = value;\n    }\n\n    function checkUpkeep(\n        bytes calldata /* checkData */\n    ) external view override returns (bool upkeepNeeded, bytes memory /* performData */) {\n        for (uint256 i = 0; i < users.length; i++) {\n            if (condition[users[i]]) {\n                upkeepNeeded = true;\n                break;\n            }\n        }\n    }\n\n    function performUpkeep(bytes calldata /* performData */) external override {\n        for (uint256 i = 0; i < users.length; i++) {\n            address user = users[i];\n            if (condition[user]) {\n                uint256 amount = swapAmounts[user];\n                if (amount > 0) {\n                    swapTokens(user, amount);\n                }\n                condition[user] = false;\n            }\n        }\n    }\n\n    function swapTokens(address user, uint256 amount) internal {\n        (bool success, ) = swapContractAddress.call(\n            abi.encodeWithSignature(\"swap(uint256)\", amount)\n        );\n        require(success, \"Swap failed\");\n        emit TokensSwapped(user, amount);\n    }\n\n    function reset() external {\n        // Only for demonstration purposes; in a real scenario, proper access control is needed.\n        for (uint256 i = 0; i < users.length; i++) {\n            address user = users[i];\n            condition[user] = false;\n            swapAmounts[user] = 0;\n        }\n        delete users;\n    }\n}\n"
    },
    "contracts/MockSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ncontract MockSwap {\n    event Swap(address indexed user, uint256 amount);\n    event Mint(address indexed user, uint256 amount);\n    event ReverseSwap(address indexed user, uint256 amount);\n\n    mapping(address => uint256) public balances;\n    mapping(address => uint256) public tokenBalances;\n    address[] public users;\n\n    function deposit() external payable {\n        if (balances[msg.sender] == 0 && tokenBalances[msg.sender] == 0) {\n            users.push(msg.sender);\n        }\n        balances[msg.sender] += msg.value;\n        tokenBalances[msg.sender] += msg.value; // 1:1 ratio for simplicity\n        emit Mint(msg.sender, msg.value);\n    }\n\n    function swap(uint256 amount) external {\n        require(tokenBalances[msg.sender] >= amount, \"Insufficient token balance\");\n        tokenBalances[msg.sender] -= amount;\n        emit Swap(msg.sender, amount);\n    }\n\n    function reverseSwap(uint256 amount) external {\n        require(balances[msg.sender] >= amount, \"Insufficient ether balance\");\n        balances[msg.sender] -= amount;\n        tokenBalances[msg.sender] += amount; // Mint back the tokens\n        payable(msg.sender).transfer(amount);\n        emit ReverseSwap(msg.sender, amount);\n    }\n\n    function getBalance(address user) external view returns (uint256) {\n        return balances[user];\n    }\n\n    function getTokenBalance(address user) external view returns (uint256) {\n        return tokenBalances[user];\n    }\n\n    function resetBalances() external {\n        // Only for demonstration purposes; in a real scenario, proper access control is needed.\n        for (uint256 i = 0; i < users.length; i++) {\n            balances[users[i]] = 0;\n            tokenBalances[users[i]] = 0;\n        }\n        delete users;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}